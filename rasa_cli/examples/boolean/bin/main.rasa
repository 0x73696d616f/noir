    fn main(x : Witness, z : Witness) {
        bool(x);
        bool2(z);
        constrain x != z;
    }
    fn bool(w : Witness) {
        constrain w * w - w == 0;
    }
    fn bool2(w : Witness) {
        const one = 1;
        constrain w * (one - w) == 0;
    }


    // Framework -> Create smart contract verifier
    // DSL -> Higher level PLOOKUP/ULTRAPLONK -> _WHAT_  width
    // sha256(input) -> output Zac: internal impl needs plookup(custom directive) 
    // range(witness) -> witness
    // DSL -> Lower level Proving system/DSL _How_ 